Index: Model/Func/Circulation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\nfrom Utils.RequestsUtils import RequestsPage\r\nfrom Utils.ElibUtils import ElibPage\r\n\r\n\r\nclass CirculationPage:\r\n\r\n    def __init__(self):\r\n        self.rp = RequestsPage()\r\n        self.ep = ElibPage('TJ', '6Tet8CNiT2soE8BiYcXR%2FA%3D%3D')\r\n\r\n\r\n    def BRRManage(self):\r\n        \"\"\"\r\n        借还续功能验证\r\n        :return: None\r\n        \"\"\"\r\n        for r1 in self.getReader():\r\n            print(self.operateBook(r1, '借'))\r\n            print(self.operateBook(r1, '续'))\r\n            print(self.operateBook(r1, '还'))\r\n\r\n        for r2 in self.getReaderForAdd():\r\n            print(self.operateBook(r2, '借'))\r\n            print(self.operateBook(r2, '续'))\r\n            print(self.operateBook(r2, '还'))\r\n\r\n\r\n    def getReader(self):\r\n        readerList = list()\r\n        # for i in self.ep.getDzlxid('more'):\r\n        res = self.rp.sendRequest('POST', self.ep.getUrl() + '/service/api/e/flow/readerManager/readerManagerList', {\r\n            'userToken': self.ep.getUserToken(),\r\n            'libid': self.ep.getLibid(),\r\n            'pageNumber': 1,\r\n            'pageSize': 50,\r\n            'ztai': '正常',\r\n            'qkuan': 0\r\n            # 'readerType': i\r\n        }).json()\r\n        for data in res['data']['dataList']:\r\n            readerList.append(data['dzzhao'])\r\n            # break\r\n        return tuple(readerList)\r\n\r\n    def getReaderForAdd(self):\r\n        \"\"\"\r\n        创建读者\r\n        :return: String\r\n        \"\"\"\r\n        readerList = list()\r\n        for n in self.rp.getRandomReaderID():\r\n            # 发送添加读者的请求\r\n            res = self.rp.sendRequest('POST', self.ep.getUrl() + '/service/api/e/flow/readerManager/readerManagerSave', {\r\n                \"userToken\": self.ep.getUserToken(),\r\n                \"dzzhao\": n,      # 读者证号\r\n                \"xming\": n,       # 姓名\r\n                \"ztai\": \"正常\",       # 状态\r\n                \"mima\": \"123456\",       # 密码\r\n                \"dzlxid\": self.ep.getDzlxid(),       # 读者类型\r\n                \"jzrqi\": \"2020-10-31\",      # 截止日期\r\n                \"qyrqi\": \"2020-08-01\",      # 启用日期\r\n                \"libid\": self.ep.getLibid(),        # 馆id\r\n                \"smrz\": \"0\",\r\n                \"zhuanye\": \"其他\",\r\n                \"zhiwu\": \"无\",\r\n                \"zcheng\": \"无\",\r\n                \"xueli\": \"其他\",\r\n                \"xingbie\": self.ep.getXingbie(),\r\n                \"yajin\": \"0\",\r\n                \"zhiye\": \"其他\",\r\n                \"jycshu\": \"0\",\r\n                \"yycshu\": \"0\",\r\n                \"xjcshu\": \"0\",\r\n                \"wzcshu\": \"0\",\r\n                \"gjhjcshu\": \"0\",\r\n                \"qkuan\": \"0\",\r\n                \"dzdw\": self.rp.randomValue(self.ep.getDzdw()),\r\n                \"registerPlaceId\": self.rp.randomValue(self.ep.getRegisterPlaceId())       # 办证地点\r\n            }).json()\r\n            if res['message'] == '操作成功!':\r\n                readerList.append(n)\r\n                return tuple(readerList)\r\n\r\n\r\n\r\n    def operateBook(self, reader, state):\r\n        res_sm = self.rp.sendRequest('POST', self.ep.getUrl() + '/service/api/e/catalog/catalogue/list', {\r\n            'userToken': self.ep.getUserToken(),\r\n            'libid': self.ep.getLibid(),\r\n            'pageNumber': 1,\r\n            'pageSize': 1000,\r\n            'userType': 1,\r\n            'dateType': 1\r\n        }).json()\r\n        for data in res_sm['data']['dataList']:\r\n            res_gc = self.rp.sendRequest('POST', self.ep.getUrl() + '/service/api/e/book/listByCatalogue', {\r\n                'userToken': self.ep.getUserToken(),\r\n                'pageNumber': 1,\r\n                'pageSize': 1000,\r\n                'marctyId': data['marctyid'],\r\n                'isShow': 0\r\n            }).json()\r\n            # 书目馆藏数量不等于0\r\n            if res_gc['data']['count'] != 0:\r\n                for d in res_gc['data']['page']['dataList']:\r\n                    if d['ztai'] == '在馆' and state == '借':\r\n                        broResult = self.rp.sendRequest('POST', self.ep.getUrl() + '/service/api/e/flow/doclx/bro', {\r\n                            'userToken': self.ep.getUserToken(),\r\n                            'readerBarcode': reader,\r\n                            'bookBarcode': d['tiaoma']\r\n                        }).json()\r\n                        return broResult['message']     # message=借阅成功\r\n                    elif d['ztai'] == '借出' and state == '续':\r\n                        renResult = self.rp.sendRequest('POST', self.ep.getUrl() + '/service/api/e/flow/doclx/ren', {\r\n                            'userToken': self.ep.getUserToken(),\r\n                            'readerBarcode': reader,\r\n                            'bookBarcode': d['tiaoma']\r\n                        }).json()\r\n                        return renResult['message']  # message=续借成功！\r\n                    elif d['ztai'] == '借出' and state == '还':\r\n                        retResult = self.rp.sendRequest('POST', self.ep.getUrl() + '/service/api/e/flow/doclx/ret', {\r\n                            'userToken': self.ep.getUserToken(),\r\n                            'isSameCz': 1,\r\n                            'bookBarcode': d['tiaoma']\r\n                        }).json()\r\n                        return retResult['message']  # message=还书成功！\r\n                    else:\r\n                        print('数据错误')\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(CirculationPage().BRRManage())
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Model/Func/Circulation.py	(revision 783afe295508d2557114930f6e5b682ca1e84132)
+++ Model/Func/Circulation.py	(date 1596443329415)
@@ -7,7 +7,7 @@
 
     def __init__(self):
         self.rp = RequestsPage()
-        self.ep = ElibPage('TJ', '6Tet8CNiT2soE8BiYcXR%2FA%3D%3D')
+        self.ep = ElibPage('zhouminhao', '6Tet8CNiT2soE8BiYcXR%252FA%253D%253D')
 
 
     def BRRManage(self):
@@ -132,4 +132,4 @@
 
 
 if __name__ == '__main__':
-    print(CirculationPage().BRRManage())
\ No newline at end of file
+    print(CirculationPage().BRRManage())
